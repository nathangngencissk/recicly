AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: "Recicly"

Globals:
  Function:
    CodeUri: "../recicly/"
    Runtime: "python3.7"
    MemorySize: 128
    Timeout: 60
    Environment:
      Variables:
        ENVIRONMENT: "production"
        REGION: !Ref AWS::Region
        ACCOUNT_ID: !Ref AWS::AccountId
        PASSWORD: "{{resolve:ssm:/recicly/rds/password:1}}"
        URL: "{{resolve:ssm:/recicly/rds/url:1}}"
        QRCODEBUCKET: !Ref QrCodeBucket
        PICTURESBUCKET: !Ref PicturesBucket

Resources:
  # IAM
  ExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${AWS::StackName}-api-execution-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "EventBus"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "events:PutEvents"
                Resource: "*"

  # API
  Api:
    Type: "AWS::Serverless::Api"
    Properties:
      StageName: "Prod"
      Cors:
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  # QR Code Bucket
  QrCodeBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "recicly-qr-code-images"

  QrCodeBucketAllowPublicReadPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref QrCodeBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
            Resource:
              - !Join ["/", [!GetAtt QrCodeBucket.Arn, "*"]]
            Principal: "*"

  # Pictures Bucket
  PicturesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: "recicly-pictures"

  PicturesBucketAllowPublicReadPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PicturesBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - "s3:GetObject"
            Resource:
              - !Join ["/", [!GetAtt PicturesBucket.Arn, "*"]]
            Principal: "*"

  # User
  GetUsers:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-all-users"
      Handler: "handlers.user.get_all.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /user/get-all
            Method: get

  GetUser:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-user"
      Handler: "handlers.user.get.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /user/get
            Method: get

  AddUser:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-add-user"
      Handler: "handlers.user.add.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /user/add
            Method: post

  UpdateUser:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-update-user"
      Handler: "handlers.user.update.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /user/update
            Method: put

  DeleteUser:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-delete-user"
      Handler: "handlers.user.delete.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /user/delete
            Method: delete

  AuthenticateUser:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-authenticate-user"
      Handler: "handlers.user.authenticate.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /user/authenticate
            Method: post

  GetUserAdresses:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-user-adresses"
      Handler: "handlers.user.get_adresses.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /user/adresses
            Method: get

  GetUserRequests:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-user-requests"
      Handler: "handlers.user.get_requests.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /user/requests
            Method: get

  UserStartRequest:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-user-start-request"
      Handler: "handlers.user.start_request.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /user/start-request
            Method: post

  GetUserOrders:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-user-orders"
      Handler: "handlers.user.get_orders.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /user/orders
            Method: post

  UserBuy:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-user-buy"
      Handler: "handlers.user.buy.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /user/buy
            Method: post

  # Driver
  GetAllDrivers:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-drivers"
      Handler: "handlers.driver.get_all.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /driver/get-all
            Method: get

  GetDriver:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-driver"
      Handler: "handlers.driver.get.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /driver/get
            Method: get

  AddDriver:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-add-driver"
      Handler: "handlers.driver.add.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /driver/add
            Method: post

  UpdateDriver:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-update-driver"
      Handler: "handlers.driver.update.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /driver/update
            Method: put

  DeleteDriver:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-delete-driver"
      Handler: "handlers.driver.delete.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /driver/delete
            Method: delete

  AuthenticateDriver:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-authenticate-driver"
      Handler: "handlers.driver.authenticate.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /driver/authenticate
            Method: post

  GetDriverRequests:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-driver-requests"
      Handler: "handlers.driver.get_requests.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /driver/requests
            Method: get

  GetNewRequests:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-new-requests"
      Handler: "handlers.request.get_new_requests.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /request/new
            Method: get

  DriverStartDelivery:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-driver-start-delivery"
      Handler: "handlers.driver.start_delivery.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /driver/start-delivery
            Method: post

  DriverDeliver:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-driver-deliver"
      Handler: "handlers.driver.deliver.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /driver/deliver
            Method: post

  # Collector
  GetAllCollectors:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-collectors"
      Handler: "handlers.collector.get_all.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /collector/get-all
            Method: get

  GetCollector:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-collector"
      Handler: "handlers.collector.get.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /collector/get
            Method: get

  GetCollectorCode:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-collector-code"
      Handler: "handlers.collector.get_code.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /collector/get-code
            Method: get

  AddCollector:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-add-collector"
      Handler: "handlers.collector.add.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /collector/add
            Method: post

  UpdateCollector:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-update-collector"
      Handler: "handlers.collector.update.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /collector/update
            Method: put

  DeleteCollector:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-delete-collector"
      Handler: "handlers.collector.delete.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /collector/delete
            Method: delete

  # Car
  GetAllCars:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-cars"
      Handler: "handlers.car.get_all.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /car/get-all
            Method: get

  GetCar:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-car"
      Handler: "handlers.car.get.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /car/get
            Method: get

  AddCar:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-add-car"
      Handler: "handlers.car.add.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /car/add
            Method: post

  UpdateCar:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-update-car"
      Handler: "handlers.car.update.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /car/update
            Method: put

  DeleteCar:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-delete-car"
      Handler: "handlers.car.delete.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /car/delete
            Method: delete

  # Partner
  GetAllPartners:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-partners"
      Handler: "handlers.partner.get_all.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /partner/get-all
            Method: get

  GetPartner:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-partner"
      Handler: "handlers.partner.get.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /partner/get
            Method: get

  AddPartner:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-add-partner"
      Handler: "handlers.partner.add.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /partner/add
            Method: post

  UpdatePartner:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-update-partner"
      Handler: "handlers.partner.update.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /partner/update
            Method: put

  DeletePartner:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-delete-partner"
      Handler: "handlers.partner.delete.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /partner/delete
            Method: delete

  # Product
  GetAllProducts:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-products"
      Handler: "handlers.product.get_all.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /product/get-all
            Method: get

  GetProduct:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-product"
      Handler: "handlers.product.get.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /product/get
            Method: get

  AddProduct:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-add-product"
      Handler: "handlers.product.add.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /product/add
            Method: post

  UpdateProduct:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-update-product"
      Handler: "handlers.product.update.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /product/update
            Method: put

  DeleteProduct:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-delete-product"
      Handler: "handlers.product.delete.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /product/delete
            Method: delete

  # Adress
  GetAllAdresses:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-adresses"
      Handler: "handlers.adress.get_all.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /adress/get-all
            Method: get

  GetAdress:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-get-adress"
      Handler: "handlers.adress.get.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /adress/get
            Method: get

  AddAdress:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-add-adress"
      Handler: "handlers.adress.add.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /adress/add
            Method: post

  UpdateAdress:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-update-adress"
      Handler: "handlers.adress.update.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /adress/update
            Method: put

  DeleteAdress:
    Type: "AWS::Serverless::Function"
    Properties:
      FunctionName: !Sub "${AWS::StackName}-delete-adress"
      Handler: "handlers.adress.delete.handle"
      Role: !GetAtt ExecutionRole.Arn
      Events:
        ApiEnpoint:
          Type: Api
          Properties:
            RestApiId: !Ref Api
            Path: /adress/delete
            Method: delete
